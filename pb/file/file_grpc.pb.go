// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: file.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FindFileClient is the client API for FindFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FindFileClient interface {
	GetDownloadDir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Resource, error)
	GetFiles(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Resource, error)
	GetFileStream(ctx context.Context, in *StreamRequestData, opts ...grpc.CallOption) (FindFile_GetFileStreamClient, error)
}

type findFileClient struct {
	cc grpc.ClientConnInterface
}

func NewFindFileClient(cc grpc.ClientConnInterface) FindFileClient {
	return &findFileClient{cc}
}

func (c *findFileClient) GetDownloadDir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/file.FindFile/GetDownloadDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *findFileClient) GetFiles(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/file.FindFile/GetFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *findFileClient) GetFileStream(ctx context.Context, in *StreamRequestData, opts ...grpc.CallOption) (FindFile_GetFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FindFile_ServiceDesc.Streams[0], "/file.FindFile/GetFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &findFileGetFileStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FindFile_GetFileStreamClient interface {
	Recv() (*StreamResponseData, error)
	grpc.ClientStream
}

type findFileGetFileStreamClient struct {
	grpc.ClientStream
}

func (x *findFileGetFileStreamClient) Recv() (*StreamResponseData, error) {
	m := new(StreamResponseData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FindFileServer is the server API for FindFile service.
// All implementations must embed UnimplementedFindFileServer
// for forward compatibility
type FindFileServer interface {
	GetDownloadDir(context.Context, *Path) (*Resource, error)
	GetFiles(context.Context, *Path) (*Resource, error)
	GetFileStream(*StreamRequestData, FindFile_GetFileStreamServer) error
	mustEmbedUnimplementedFindFileServer()
}

// UnimplementedFindFileServer must be embedded to have forward compatible implementations.
type UnimplementedFindFileServer struct {
}

func (UnimplementedFindFileServer) GetDownloadDir(context.Context, *Path) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadDir not implemented")
}
func (UnimplementedFindFileServer) GetFiles(context.Context, *Path) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFindFileServer) GetFileStream(*StreamRequestData, FindFile_GetFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileStream not implemented")
}
func (UnimplementedFindFileServer) mustEmbedUnimplementedFindFileServer() {}

// UnsafeFindFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FindFileServer will
// result in compilation errors.
type UnsafeFindFileServer interface {
	mustEmbedUnimplementedFindFileServer()
}

func RegisterFindFileServer(s grpc.ServiceRegistrar, srv FindFileServer) {
	s.RegisterService(&FindFile_ServiceDesc, srv)
}

func _FindFile_GetDownloadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindFileServer).GetDownloadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FindFile/GetDownloadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindFileServer).GetDownloadDir(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FindFile_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindFileServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FindFile/GetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindFileServer).GetFiles(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FindFile_GetFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequestData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FindFileServer).GetFileStream(m, &findFileGetFileStreamServer{stream})
}

type FindFile_GetFileStreamServer interface {
	Send(*StreamResponseData) error
	grpc.ServerStream
}

type findFileGetFileStreamServer struct {
	grpc.ServerStream
}

func (x *findFileGetFileStreamServer) Send(m *StreamResponseData) error {
	return x.ServerStream.SendMsg(m)
}

// FindFile_ServiceDesc is the grpc.ServiceDesc for FindFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FindFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.FindFile",
	HandlerType: (*FindFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDownloadDir",
			Handler:    _FindFile_GetDownloadDir_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _FindFile_GetFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileStream",
			Handler:       _FindFile_GetFileStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file.proto",
}
